const axios = require('axios');
const { startServer, stopServer } = require('../apps/report-comment/backend/src/server');

describe('Report API', () => {
  beforeAll(async () => {
    // Start the server before tests
    await startServer();
  });

  afterAll(async () => {
    // Stop the server after tests
    await stopServer();
  });

  test('should submit a report successfully', async () => {
    const response = await axios.post('http://localhost:3001/report', {
      commentId: '123',
      reason: 'Sexism',
      userId: 'anonymous',
      description: 'Comment contains misogynistic language'
    });
    expect(response.status).toBe(200);
    expect(response.data.message).toBe('Report submitted successfully');
  });

  test('should reject missing commentId', async () => {
    try {
      await axios.post('http://localhost:3001/report', {
        reason: 'Sexism',
        userId: 'anonymous'
      });
    } catch (error) {
      expect(error.response.status).toBe(400);
      expect(error.response.data.message).toBe('Missing commentId or reason');
    }
  });

  test('should reject missing reason', async () => {
    try {
      await axios.post('http://localhost:3001/report', {
        commentId: '123',
        userId: 'anonymous'
      });
    } catch (error) {
      expect(error.response.status).toBe(400);
      expect(error.response.data.message).toBe('Missing commentId or reason');
    }
  });

  test('should handle non-existent comment', async () => {
    try {
      await axios.post('http://localhost:3001/report', {
        commentId: 'nonexistent',
        reason: 'Bullying',
        userId: 'anonymous'
      });
    } catch (error) {
      expect(error.response.status).toBe(404);
      expect(error.response.data.message).toBe('Comment not found');
    }
  });
});
